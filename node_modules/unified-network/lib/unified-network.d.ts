export interface IUnifiedRequest {
    method?: 'get' | 'post' | 'patch' | 'put' | 'delete' | 'head';
    baseUrl?: string;
    url: string;
    queries?: {
        [key: string]: string;
    };
    parameters?: {
        [key: string]: string;
    };
    headers?: {
        [key: string]: string;
    };
    body?: any;
    processor?: IUnifiedRequestProcessor;
}
export interface IUnifiedRequestProcessorConfig {
    method: 'get' | 'post' | 'patch' | 'put' | 'delete' | 'head';
    url: string;
    headers?: {
        [key: string]: string;
    };
    body?: any;
}
export interface IUnifiedResponse {
    status: number;
    headers: {
        [key: string]: string;
    };
    data?: any;
}
export declare type IUnifiedRequestProcessor = ((config: IUnifiedRequestProcessorConfig) => Promise<IUnifiedResponse>);
export declare class UnifiedNetwork {
    base: Partial<IUnifiedRequest>;
    constructor(base?: Partial<IUnifiedRequest>);
    request(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
    get(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
    post(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
    put(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
    patch(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
    delete(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
    head(config: IUnifiedRequest): Promise<{
        status: number;
        data: any;
        headers: Record<string, string>;
    }>;
}
