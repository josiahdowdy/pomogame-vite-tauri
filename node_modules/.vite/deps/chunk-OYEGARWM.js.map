{
  "version": 3,
  "sources": ["../../vuetify/src/composables/border.ts", "../../vuetify/src/composables/elevation.ts", "../../vuetify/src/composables/variant.tsx"],
  "sourcesContent": ["// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface BorderProps {\n  border?: boolean | number | string\n}\n\n// Composables\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String],\n}, 'border')\n\nexport function useBorder (\n  props: BorderProps,\n  name = getCurrentInstanceName(),\n) {\n  const borderClasses = computed(() => {\n    const border = isRef(props) ? props.value : props.border\n    const classes: string[] = []\n\n    if (border === true || border === '') {\n      classes.push(`${name}--border`)\n    } else if (\n      typeof border === 'string' ||\n      border === 0\n    ) {\n      for (const value of String(border).split(' ')) {\n        classes.push(`border-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { borderClasses }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nexport interface ElevationProps {\n  elevation?: number | string | null\n}\n\n// Composables\nexport const makeElevationProps = propsFactory({\n  elevation: {\n    type: [Number, String],\n    validator (v: any) {\n      const value = parseInt(v)\n\n      return (\n        !isNaN(value) &&\n        value >= 0 &&\n        // Material Design has a maximum elevation of 24\n        // https://material.io/design/environment/elevation.html#default-elevations\n        value <= 24\n      )\n    },\n  },\n}, 'elevation')\n\ntype ElevationData = {\n  elevationClasses: Ref<string[]>\n}\n\nexport function useElevation (props: ElevationProps | Ref<number | string | undefined>): ElevationData {\n  const elevationClasses = computed(() => {\n    const elevation = isRef(props) ? props.value : props.elevation\n    const classes: string[] = []\n\n    if (elevation == null) return classes\n\n    classes.push(`elevation-${elevation}`)\n\n    return classes\n  })\n\n  return { elevationClasses }\n}\n", "// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'elevated',\n  'flat',\n  'tonal',\n  'outlined',\n  'text',\n  'plain',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <div key=\"overlay\" class={`${name}__overlay`} /> }\n\n      <div key=\"underlay\" class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'elevated',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['elevated', 'flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAUO,IAAMA,kBAAkBC,aAAa;EAC1CC,QAAQ,CAACC,SAASC,QAAQC,MAAlB;AADkC,GAEzC,QAFwC;AAIpC,SAASC,UACdC,OAEA;AAAA,MADAC,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADOC,uBAAsB;AAE7B,QAAMC,gBAAgBC,SAAS,MAAM;AACnC,UAAMT,SAASU,MAAML,KAAD,IAAUA,MAAMM,QAAQN,MAAML;AAClD,UAAMY,UAAoB,CAAA;AAE1B,QAAIZ,WAAW,QAAQA,WAAW,IAAI;AACpCY,cAAQC,KAAM,GAAEP,cAAhB;IACD,WACC,OAAON,WAAW,YAClBA,WAAW,GACX;AACA,iBAAWW,SAASR,OAAOH,MAAD,EAASc,MAAM,GAArB,GAA2B;AAC7CF,gBAAQC,KAAM,UAASF,OAAvB;MACD;IACF;AAED,WAAOC;EACR,CAhB6B;AAkB9B,SAAO;IAAEJ;EAAF;AACR;;;AC1BM,IAAMO,qBAAqBC,aAAa;EAC7CC,WAAW;IACTC,MAAM,CAACC,QAAQC,MAAT;IACNC,UAAWC,GAAQ;AACjB,YAAMC,QAAQC,SAASF,CAAD;AAEtB,aACE,CAACG,MAAMF,KAAD,KACNA,SAAS,KAGTA,SAAS;IAEZ;EAZQ;AADkC,GAe5C,WAf2C;AAqBvC,SAASG,aAAcC,OAAyE;AACrG,QAAMC,mBAAmBC,SAAS,MAAM;AACtC,UAAMZ,YAAYa,MAAMH,KAAD,IAAUA,MAAMJ,QAAQI,MAAMV;AACrD,UAAMc,UAAoB,CAAA;AAE1B,QAAId,aAAa;AAAM,aAAOc;AAE9BA,YAAQC,KAAM,aAAYf,WAA1B;AAEA,WAAOc;EACR,CATgC;AAWjC,SAAO;IAAEH;EAAF;AACR;;;AClCM,IAAMK,kBAAkB,CAC7B,YACA,QACA,SACA,YACA,QACA,OAN6B;AAgBxB,SAASC,YAAaC,aAAsBC,MAAc;AAC/D,SAAA,YAAA,UAAA,MAAA,CAEMD,eAAW,YAAA,OAAA;IAAA,OAAa;IAAb,SAA+B,GAAEC;EAAjC,GAAA,IAAA,GAFjB,YAAA,OAAA;IAAA,OAIa;IAJb,SAIgC,GAAEA;EAJlC,GAAA,IAAA,CAAA,CAAA;AAOD;AAEM,IAAMC,mBAAmBC,aAAa;EAC3CC,OAAOC;EACPC,SAAS;IACPC,MAAMF;IACNG,SAAS;IACTC,WAAYC,OAAWZ,gBAAgBa,SAASD,CAAzB;EAHhB;AAFkC,GAO1C,SAPyC;AASrC,SAASE,WACdC,OAEA;AAAA,MADAZ,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADOa,uBAAsB;AAE7B,QAAMC,iBAAiBC,SAAS,MAAM;AACpC,UAAM;MAAEV;IAAF,IAAcW,MAAMJ,KAAD;AACzB,WAAQ,GAAEZ,iBAAiBK;EAC5B,CAH8B;AAK/B,QAAM;IAAEY;IAAcC;EAAhB,IAAgCC,SAASJ,SAAS,MAAM;AAC5D,UAAM;MAAEV;MAASF;IAAX,IAAqBa,MAAMJ,KAAD;AAChC,WAAO;MACL,CAAC,CAAC,YAAY,MAAb,EAAqBF,SAASL,OAA9B,IAAyC,eAAe,SAASF;IAD7D;EAGR,CALsD,CAAT;AAO9C,SAAO;IAAEc;IAAcC;IAAaJ;EAA7B;AACR;",
  "names": ["makeBorderProps", "propsFactory", "border", "Boolean", "Number", "String", "useBorder", "props", "name", "getCurrentInstanceName", "borderClasses", "computed", "isRef", "value", "classes", "push", "split", "makeElevationProps", "propsFactory", "elevation", "type", "Number", "String", "validator", "v", "value", "parseInt", "isNaN", "useElevation", "props", "elevationClasses", "computed", "isRef", "classes", "push", "allowedVariants", "genOverlays", "isClickable", "name", "makeVariantProps", "propsFactory", "color", "String", "variant", "type", "default", "validator", "v", "includes", "useVariant", "props", "getCurrentInstanceName", "variantClasses", "computed", "unref", "colorClasses", "colorStyles", "useColor"]
}
