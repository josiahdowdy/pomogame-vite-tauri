{
  "version": 3,
  "sources": ["../../vuetify/src/directives/intersect/index.ts", "../../vuetify/src/composables/transition.ts"],
  "sourcesContent": ["// Utils\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n  ObjectDirective,\n} from 'vue'\n\ntype ObserveHandler = (\n  isIntersecting: boolean,\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n) => void\n\nexport interface ObserveDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  if (!SUPPORTS_INTERSECTION) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    const _observe = el._observe?.[binding.instance!.$.uid]\n    if (!_observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        _observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        _observe.init\n      )\n    ) {\n      handler(isIntersecting, entries, observer)\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el, binding)\n    else _observe.init = true\n  }, options)\n\n  el._observe = Object(el._observe)\n  el._observe![binding.instance!.$.uid] = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unmounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  const observe = el._observe?.[binding.instance!.$.uid]\n  if (!observe) return\n\n  observe.observer.unobserve(el)\n  delete el._observe![binding.instance!.$.uid]\n}\n\nexport const Intersect: ObjectDirective<HTMLElement> = {\n  mounted,\n  unmounted,\n}\n\nexport default Intersect\n", "// Utilities\nimport { h, mergeProps, Transition } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Component, FunctionalComponent, PropType, TransitionProps } from 'vue'\n\nexport const makeTransitionProps = propsFactory({\n  transition: {\n    type: [Boolean, String, Object] as PropType<string | boolean | TransitionProps & { component?: Component }>,\n    default: 'fade-transition',\n    validator: val => val !== true,\n  },\n}, 'transition')\n\ninterface MaybeTransitionProps extends TransitionProps {\n  transition?: string | boolean | TransitionProps & { component?: any }\n}\n\nexport const MaybeTransition: FunctionalComponent<MaybeTransitionProps> = (props, { slots }) => {\n  const { transition, ...rest } = props\n\n  if (!transition || typeof transition === 'boolean') return slots.default?.()\n\n  const { component = Transition, ...customProps } = typeof transition === 'object' ? transition : {}\n\n  return h(\n    component,\n    mergeProps(typeof transition === 'string' ? { name: transition } : customProps as any, rest as any),\n    slots\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;AAuBA,SAASA,QAASC,IAAiBC,SAAkC;AACnE,MAAI,CAACC;AAAuB;AAE5B,QAAMC,YAAYF,QAAQE,aAAa,CAAA;AACvC,QAAMC,QAAQH,QAAQG;AACtB,QAAM;IAAEC;IAASC;EAAX,IAAuB,OAAOF,UAAU,WAC1CA,QACA;IAAEC,SAASD;IAAOE,SAAS,CAAA;EAA3B;AAEJ,QAAMC,WAAW,IAAIC,qBAAqB,WAGrC;AAAA,QAAA;AAAA,QAFHC,UAEG,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KAFoC,CAAA;AAEpC,QADHF,YACG,UAAA,SAAA,IAAA,UAAA,KAAA;AACH,UAAMG,YAAQ,eAAGV,GAAGU,aAAN,OAAA,SAAG,aAAcT,QAAQU,SAAUC,EAAEC;AACnD,QAAI,CAACH;AAAU;AAEf,UAAMI,iBAAiBL,QAAQM,KAAKC,WAASA,MAAMF,cAA5B;AAIvB,QACET,YACE,CAACF,UAAUc,SACXP,SAASQ,UAET,CAACf,UAAUgB,QACXL,kBACAJ,SAASQ,OAEX;AACAb,cAAQS,gBAAgBL,SAASF,SAA1B;IACR;AAED,QAAIO,kBAAkBX,UAAUgB;AAAMC,gBAAUpB,IAAIC,OAAL;;AAC1CS,eAASQ,OAAO;EACtB,GAAEZ,OA1Bc;AA4BjBN,KAAGU,WAAWW,OAAOrB,GAAGU,QAAJ;AACpBV,KAAGU,SAAUT,QAAQU,SAAUC,EAAEC,OAAO;IAAEK,MAAM;IAAOX;EAAf;AAExCA,WAASe,QAAQtB,EAAjB;AACD;AAED,SAASoB,UAAWpB,IAAiBC,SAAkC;AAAA,MAAA;AACrE,QAAMqB,WAAO,gBAAGtB,GAAGU,aAAN,OAAA,SAAG,cAAcT,QAAQU,SAAUC,EAAEC;AAClD,MAAI,CAACS;AAAS;AAEdA,UAAQf,SAASgB,UAAUvB,EAA3B;AACA,SAAOA,GAAGU,SAAUT,QAAQU,SAAUC,EAAEC;AACzC;AAEM,IAAMW,YAA0C;EACrDzB;EACAqB;AAFqD;AAKvD,IAAA,oBAAeI;;;ACxER,IAAMC,sBAAsBC,aAAa;EAC9CC,YAAY;IACVC,MAAM,CAACC,SAASC,QAAQC,MAAlB;IACNC,SAAS;IACTC,WAAWC,SAAOA,QAAQ;EAHhB;AADkC,GAM7C,YAN4C;AAYxC,IAAMC,kBAA6D,CAACC,OAAD,SAAsB;AAAA,MAAA;AAAA,MAAd;IAAEC;EAAF,IAAc;AAC9F,QAAM;IAAEV;OAAeW;EAAjB,IAA0BF;AAEhC,MAAI,CAACT,cAAc,OAAOA,eAAe;AAAW,YAAA,iBAAOU,MAAML,YAAb,OAAA,SAAO,eAAA,KAAAK,KAAK;AAEhE,QAAM;IAAEE,YAAYC;OAAeC;EAA7B,IAA6C,OAAOd,eAAe,WAAWA,aAAa,CAAA;AAEjG,SAAOe,EACLH,WACAI,WAAW,OAAOhB,eAAe,WAAW;IAAEiB,MAAMjB;EAAR,IAAuBc,aAAoBH,IAA7E,GACVD,KAHM;AAKT;",
  "names": ["mounted", "el", "binding", "SUPPORTS_INTERSECTION", "modifiers", "value", "handler", "options", "observer", "IntersectionObserver", "entries", "_observe", "instance", "$", "uid", "isIntersecting", "some", "entry", "quiet", "init", "once", "unmounted", "Object", "observe", "unobserve", "Intersect", "makeTransitionProps", "propsFactory", "transition", "type", "Boolean", "String", "Object", "default", "validator", "val", "MaybeTransition", "props", "slots", "rest", "component", "Transition", "customProps", "h", "mergeProps", "name"]
}
