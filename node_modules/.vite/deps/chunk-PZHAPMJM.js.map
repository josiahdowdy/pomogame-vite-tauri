{
  "version": 3,
  "sources": ["../../vuetify/src/composables/color.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, isRef } from 'vue'\nimport { isCssColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  const backgroundIsCssColor = computed(() => isCssColor(colors.value.background))\n  const textIsCssColor = computed(() => isCssColor(colors.value.text))\n\n  const colorClasses = computed(() => {\n    const classes: string[] = []\n\n    if (colors.value.background && !backgroundIsCssColor.value) {\n      classes.push(`bg-${colors.value.background}`)\n    }\n\n    if (colors.value.text && !textIsCssColor.value) {\n      classes.push(`text-${colors.value.text}`)\n    }\n\n    return classes\n  })\n\n  const colorStyles = computed(() => {\n    const styles: CSSProperties = {}\n\n    if (colors.value.background && backgroundIsCssColor.value) {\n      styles.backgroundColor = colors.value.background\n    }\n\n    if (colors.value.text && textIsCssColor.value) {\n      styles.color = colors.value.text\n      styles.caretColor = colors.value.text\n    }\n\n    return styles\n  })\n\n  return { colorClasses, colorStyles }\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"],
  "mappings": ";;;;;;;;;AAoBO,SAASA,SAAUC,QAA6D;AACrF,QAAMC,uBAAuBC,SAAS,MAAMC,WAAWH,OAAOI,MAAMC,UAAd,CAAjB;AACrC,QAAMC,iBAAiBJ,SAAS,MAAMC,WAAWH,OAAOI,MAAMG,IAAd,CAAjB;AAE/B,QAAMC,eAAeN,SAAS,MAAM;AAClC,UAAMO,UAAoB,CAAA;AAE1B,QAAIT,OAAOI,MAAMC,cAAc,CAACJ,qBAAqBG,OAAO;AAC1DK,cAAQC,KAAM,MAAKV,OAAOI,MAAMC,YAAhC;IACD;AAED,QAAIL,OAAOI,MAAMG,QAAQ,CAACD,eAAeF,OAAO;AAC9CK,cAAQC,KAAM,QAAOV,OAAOI,MAAMG,MAAlC;IACD;AAED,WAAOE;EACR,CAZ4B;AAc7B,QAAME,cAAcT,SAAS,MAAM;AACjC,UAAMU,SAAwB,CAAA;AAE9B,QAAIZ,OAAOI,MAAMC,cAAcJ,qBAAqBG,OAAO;AACzDQ,aAAOC,kBAAkBb,OAAOI,MAAMC;IACvC;AAED,QAAIL,OAAOI,MAAMG,QAAQD,eAAeF,OAAO;AAC7CQ,aAAOE,QAAQd,OAAOI,MAAMG;AAC5BK,aAAOG,aAAaf,OAAOI,MAAMG;IAClC;AAED,WAAOK;EACR,CAb2B;AAe5B,SAAO;IAAEJ;IAAcG;EAAhB;AACR;AAIM,SAASK,aACdC,OACAC,MACe;AACf,QAAMlB,SAASE,SAAS,OAAO;IAC7BK,MAAMY,MAAMF,KAAD,IAAUA,MAAMb,QAASc,OAAOD,MAAMC,QAAQ;EAD5B,EAAR;AAIvB,QAAM;IACJV,cAAcY;IACdT,aAAaU;EAFT,IAGFtB,SAASC,MAAD;AAEZ,SAAO;IAAEoB;IAAkBC;EAApB;AACR;AAIM,SAASC,mBACdL,OACAC,MACqB;AACrB,QAAMlB,SAASE,SAAS,OAAO;IAC7BG,YAAYc,MAAMF,KAAD,IAAUA,MAAMb,QAASc,OAAOD,MAAMC,QAAQ;EADlC,EAAR;AAIvB,QAAM;IACJV,cAAce;IACdZ,aAAaa;EAFT,IAGFzB,SAASC,MAAD;AAEZ,SAAO;IAAEuB;IAAwBC;EAA1B;AACR;",
  "names": ["useColor", "colors", "backgroundIsCssColor", "computed", "isCssColor", "value", "background", "textIsCssColor", "text", "colorClasses", "classes", "push", "colorStyles", "styles", "backgroundColor", "color", "caretColor", "useTextColor", "props", "name", "isRef", "textColorClasses", "textColorStyles", "useBackgroundColor", "backgroundColorClasses", "backgroundColorStyles"]
}
