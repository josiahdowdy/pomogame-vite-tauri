import {
  Ripple,
  VDefaultsProvider,
  makeDimensionProps,
  makeLocationProps,
  makePositionProps,
  makeRouterProps,
  useDimension,
  useLink,
  useLocation,
  usePosition
} from "./chunk-NQMBHO26.js";
import {
  makeLoaderProps,
  useIntersectionObserver,
  useLoader
} from "./chunk-FDTJBTX2.js";
import {
  VBtnToggleSymbol,
  makeGroupItemProps,
  useGroupItem
} from "./chunk-TPFO7OUL.js";
import {
  genOverlays,
  makeBorderProps,
  makeElevationProps,
  makeVariantProps,
  useBorder,
  useElevation,
  useVariant
} from "./chunk-OYEGARWM.js";
import {
  makeDensityProps,
  makeRoundedProps,
  useDensity,
  useRounded
} from "./chunk-6KFGWNNI.js";
import {
  VIcon,
  makeSizeProps,
  useSize
} from "./chunk-IDGAIEEH.js";
import {
  useTextColor
} from "./chunk-PZHAPMJM.js";
import {
  IconValue
} from "./chunk-HFCKJTP6.js";
import "./chunk-H5RUQQML.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-QTPTNJDB.js";
import {
  useResizeObserver
} from "./chunk-6Y4BSPXA.js";
import {
  makeTagProps
} from "./chunk-OQSOF22L.js";
import {
  convertToUnit,
  defineComponent,
  useRender
} from "./chunk-53VTJQTX.js";
import {
  computed,
  createVNode,
  nextTick,
  ref,
  resolveDirective,
  toRef,
  watch,
  watchEffect,
  withDirectives
} from "./chunk-V4LB3WK7.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VBtn/VBtn.mjs
import "D:/Code/vite/vite-tauri-template/node_modules/vuetify/lib/components/VBtn/VBtn.css";

// node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.mjs
import "D:/Code/vite/vite-tauri-template/node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.css";
var VProgressCircular = defineComponent({
  name: "VProgressCircular",
  props: {
    bgColor: String,
    color: String,
    indeterminate: [Boolean, String],
    modelValue: {
      type: [Number, String],
      default: 0
    },
    rotate: {
      type: [Number, String],
      default: 0
    },
    width: {
      type: [Number, String],
      default: 4
    },
    ...makeSizeProps(),
    ...makeTagProps({
      tag: "div"
    }),
    ...makeThemeProps()
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const MAGIC_RADIUS_CONSTANT = 20;
    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT;
    const root = ref();
    const {
      themeClasses
    } = provideTheme(props);
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(toRef(props, "color"));
    const {
      textColorClasses: underlayColorClasses,
      textColorStyles: underlayColorStyles
    } = useTextColor(toRef(props, "bgColor"));
    const {
      intersectionRef,
      isIntersecting
    } = useIntersectionObserver();
    const {
      resizeRef,
      contentRect
    } = useResizeObserver();
    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))));
    const width = computed(() => Number(props.width));
    const size = computed(() => {
      return sizeStyles.value ? Number(props.size) : contentRect.value ? contentRect.value.width : Math.max(width.value, 32);
    });
    const diameter = computed(() => MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value) * 2);
    const strokeWidth = computed(() => width.value / size.value * diameter.value);
    const strokeDashOffset = computed(() => convertToUnit((100 - normalizedValue.value) / 100 * CIRCUMFERENCE));
    watchEffect(() => {
      intersectionRef.value = root.value;
      resizeRef.value = root.value;
    });
    useRender(() => createVNode(props.tag, {
      "ref": root,
      "class": ["v-progress-circular", {
        "v-progress-circular--indeterminate": !!props.indeterminate,
        "v-progress-circular--visible": isIntersecting.value,
        "v-progress-circular--disable-shrink": props.indeterminate === "disable-shrink"
      }, themeClasses.value, sizeClasses.value, textColorClasses.value],
      "style": [sizeStyles.value, textColorStyles.value],
      "role": "progressbar",
      "aria-valuemin": "0",
      "aria-valuemax": "100",
      "aria-valuenow": props.indeterminate ? void 0 : normalizedValue.value
    }, {
      default: () => [createVNode("svg", {
        "style": {
          transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`
        },
        "xmlns": "http://www.w3.org/2000/svg",
        "viewBox": `0 0 ${diameter.value} ${diameter.value}`
      }, [createVNode("circle", {
        "class": ["v-progress-circular__underlay", underlayColorClasses.value],
        "style": underlayColorStyles.value,
        "fill": "transparent",
        "cx": "50%",
        "cy": "50%",
        "r": MAGIC_RADIUS_CONSTANT,
        "stroke-width": strokeWidth.value,
        "stroke-dasharray": CIRCUMFERENCE,
        "stroke-dashoffset": 0
      }, null), createVNode("circle", {
        "class": "v-progress-circular__overlay",
        "fill": "transparent",
        "cx": "50%",
        "cy": "50%",
        "r": MAGIC_RADIUS_CONSTANT,
        "stroke-width": strokeWidth.value,
        "stroke-dasharray": CIRCUMFERENCE,
        "stroke-dashoffset": strokeDashOffset.value
      }, null)]), slots.default && createVNode("div", {
        "class": "v-progress-circular__content"
      }, [slots.default({
        value: normalizedValue.value
      })])]
    }));
    return {};
  }
});

// node_modules/vuetify/lib/composables/selectLink.mjs
function useSelectLink(link, select) {
  watch(() => {
    var _link$isExactActive;
    return (_link$isExactActive = link.isExactActive) == null ? void 0 : _link$isExactActive.value;
  }, (isExactActive) => {
    if (link.isLink.value && isExactActive && select) {
      nextTick(() => {
        select(true);
      });
    }
  }, {
    immediate: true
  });
}

// node_modules/vuetify/lib/components/VBtn/VBtn.mjs
var VBtn = defineComponent({
  name: "VBtn",
  directives: {
    Ripple
  },
  props: {
    active: Boolean,
    symbol: {
      type: null,
      default: VBtnToggleSymbol
    },
    flat: Boolean,
    icon: [Boolean, String, Function, Object],
    prependIcon: IconValue,
    appendIcon: IconValue,
    block: Boolean,
    stacked: Boolean,
    ripple: {
      type: Boolean,
      default: true
    },
    ...makeBorderProps(),
    ...makeRoundedProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeGroupItemProps(),
    ...makeLoaderProps(),
    ...makeLocationProps(),
    ...makePositionProps(),
    ...makeRouterProps(),
    ...makeSizeProps(),
    ...makeTagProps({
      tag: "button"
    }),
    ...makeThemeProps(),
    ...makeVariantProps({
      variant: "elevated"
    })
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      loaderClasses
    } = useLoader(props);
    const {
      locationStyles
    } = useLocation(props);
    const {
      positionClasses
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      sizeClasses
    } = useSize(props);
    const group = useGroupItem(props, props.symbol, false);
    const link = useLink(props, attrs);
    const isDisabled = computed(() => (group == null ? void 0 : group.disabled.value) || props.disabled);
    const isElevated = computed(() => {
      return props.variant === "elevated" && !(props.disabled || props.flat || props.border);
    });
    useSelectLink(link, group == null ? void 0 : group.select);
    useRender(() => {
      var _slots$prepend, _slots$prepend2, _slots$default, _slots$default2, _slots$append, _slots$append2, _slots$loader, _slots$loader2;
      const Tag = link.isLink.value ? "a" : props.tag;
      const hasColor = !group || group.isSelected.value;
      const hasPrepend = !!(props.prependIcon || slots.prepend);
      const hasAppend = !!(props.appendIcon || slots.append);
      return withDirectives(createVNode(Tag, {
        "type": Tag === "a" ? void 0 : "button",
        "class": ["v-btn", group == null ? void 0 : group.selectedClass.value, {
          "v-btn--active": props.active,
          "v-btn--block": props.block,
          "v-btn--disabled": isDisabled.value,
          "v-btn--elevated": isElevated.value,
          "v-btn--flat": props.flat,
          "v-btn--icon": !!props.icon,
          "v-btn--loading": props.loading,
          "v-btn--stacked": props.stacked
        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : void 0, densityClasses.value, elevationClasses.value, loaderClasses.value, positionClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value],
        "style": [hasColor ? colorStyles.value : void 0, dimensionStyles.value, locationStyles.value],
        "disabled": isDisabled.value || void 0,
        "href": link.href.value,
        "onClick": (e) => {
          var _link$navigate;
          if (isDisabled.value)
            return;
          (_link$navigate = link.navigate) == null ? void 0 : _link$navigate.call(link, e);
          group == null ? void 0 : group.toggle();
        }
      }, {
        default: () => [genOverlays(true, "v-btn"), !props.icon && hasPrepend && createVNode(VDefaultsProvider, {
          "key": "prepend",
          "defaults": {
            VIcon: {
              icon: props.prependIcon
            }
          }
        }, {
          default: () => [createVNode("div", {
            "class": "v-btn__prepend"
          }, [(_slots$prepend = (_slots$prepend2 = slots.prepend) == null ? void 0 : _slots$prepend2.call(slots)) != null ? _slots$prepend : createVNode(VIcon, null, null)])]
        }), createVNode("div", {
          "class": "v-btn__content",
          "data-no-activator": ""
        }, [createVNode(VDefaultsProvider, {
          "key": "content",
          "defaults": {
            VIcon: {
              icon: typeof props.icon === "string" ? props.icon : void 0
            }
          }
        }, {
          default: () => [(_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)) != null ? _slots$default : typeof props.icon === "string" && createVNode(VIcon, {
            "key": "icon"
          }, null)]
        })]), !props.icon && hasAppend && createVNode(VDefaultsProvider, {
          "key": "append",
          "defaults": {
            VIcon: {
              icon: props.appendIcon
            }
          }
        }, {
          default: () => [createVNode("div", {
            "class": "v-btn__append"
          }, [(_slots$append = (_slots$append2 = slots.append) == null ? void 0 : _slots$append2.call(slots)) != null ? _slots$append : createVNode(VIcon, null, null)])]
        }), !!props.loading && createVNode("span", {
          "key": "loader",
          "class": "v-btn__loader"
        }, [(_slots$loader = (_slots$loader2 = slots.loader) == null ? void 0 : _slots$loader2.call(slots)) != null ? _slots$loader : createVNode(VProgressCircular, {
          "color": typeof props.loading === "boolean" ? void 0 : props.loading,
          "indeterminate": true,
          "size": "23",
          "width": "2"
        }, null)])]
      }), [[resolveDirective("ripple"), !isDisabled.value && props.ripple, null]]);
    });
    return {};
  }
});
export {
  VBtn
};
//# sourceMappingURL=vuetify_lib_components_VBtn_index__mjs.js.map
